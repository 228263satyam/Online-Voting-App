package com.example.onlinevotingsystem;

public class Candidate {
    String fName,lName,pName,gender,dob,aadharNum,hasSubmitted,isVerified,message,userId;

    public Candidate(){
        //no argument user
    }

    public Candidate(String fName, String lName, String gender, String party, String dob, String aadharNum,String hasSubmitted,String isVerified,String message,String userId) {
        this.fName = fName;
        this.lName = lName;
        this.pName = party;
        this.gender = gender;
        this.dob = dob;
        this.aadharNum = aadharNum;
        this.hasSubmitted = hasSubmitted;
        this.isVerified = isVerified;
        this.message = message;
        this.userId = userId;
    }

    public String getAadharNum() {
        return aadharNum;
    }

    public String getDob() {
        return dob;
    }

    public String getfName() {
        return fName;
    }

    public String getlName() {
        return lName;
    }

    public String getGender() {
        return gender;
    }

    public String getHasSubmitted() {
        return hasSubmitted;
    }

    public String getIsVerified() {
        return isVerified;
    }

    public String getMessage() {
        return message;
    }

    public String getUserId() {
        return userId;
    }

    public void setfName(String fName) {
        this.fName = fName;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public void setlName(String lName) {
        this.lName = lName;
    }

    public void setAadharNum(String aadharNum) {
        this.aadharNum = aadharNum;
    }

    public void setDob(String dob) {
        this.dob = dob;
    }

    public void setHasSubmitted(String hasSubmitted) {
        this.hasSubmitted = hasSubmitted;
    }

    public void setIsVerified(String isVerified) {
        this.isVerified = isVerified;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getpName() {
        return pName;
    }

    public void setpName(String pName) {
        this.pName = pName;
    }
}
package com.example.onlinevotingsystem;

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class ECACandidateReviewActivity extends AppCompatActivity {
    private List<String> candidatesId = new ArrayList<>();
    private int idx = 0;
    private TextView firstName, lastName, aadharNum, gender, dob, partyName,electionName;
    private LinearLayout upparLayout, done;
    private EditText message;
    private Button cAccept, cDecline, backToMain, backToMain2;
    private ImageView cAadharImg;
    private final OkHttpClient client = new OkHttpClient();
    private final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co";
    private final String SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_eca_ec_review);

        backToMain = findViewById(R.id.backToMainFromReviewCandidate);
        backToMain2 = findViewById(R.id.backToMainFromReviewCandidate2);
        backToMain.setOnClickListener(v -> finish());
        backToMain2.setOnClickListener(v -> finish());

        cAccept = findViewById(R.id.cAccept);
        cDecline = findViewById(R.id.cDecline);
        firstName = findViewById(R.id.cFirstName);
        lastName = findViewById(R.id.cLastName);
        aadharNum = findViewById(R.id.cAadharNum);
        gender = findViewById(R.id.cGender);
        dob = findViewById(R.id.cDob);
        message = findViewById(R.id.cReviewMessage);
        cAadharImg = findViewById(R.id.cAadharImg);
        upparLayout = findViewById(R.id.upperLayout);
        done = findViewById(R.id.doneLayout);
        partyName = findViewById(R.id.cProfileName);
        electionName=findViewById(R.id.cElectionName);
        fetchCandidates();

        cAccept.setOnClickListener(v -> verifyCandidate(true));
        cDecline.setOnClickListener(v -> verifyCandidate(false));
    }

    private void fetchCandidates() {
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/election_candidates?is_verified=eq.false")
                .addHeader("apikey", SUPABASE_KEY)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), e.getMessage(), Toast.LENGTH_LONG).show());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String responsebody=response.body().string();
                Log.d("onResponse: ",responsebody);
                if (response.isSuccessful()) {
                    try {
                        JSONArray jsonArray = new JSONArray(responsebody);
                        for (int i = 0; i < jsonArray.length(); i++) {
                            candidatesId.add(jsonArray.getJSONObject(i).getString("id"));
                        }
                        runOnUiThread(() -> {
                            if (!candidatesId.isEmpty()) updateUser(candidatesId.get(idx));
                            else done();
                        });
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    private void updateUser(String uid) {
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/election_candidates?id=eq." + uid)
                .addHeader("apikey", SUPABASE_KEY)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), e.getMessage(), Toast.LENGTH_LONG).show());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (response.isSuccessful()) {
                    try {
                        JSONArray jsonArray = new JSONArray(response.body().string());
                        JSONObject candidate = jsonArray.getJSONObject(0);

                        // Extract data
                        String imageUrl = candidate.optString("file_url"); // Ensure field name matches DB
                        String firstNameStr = candidate.optString("first_name");
                        String lastNameStr = candidate.optString("last_name");
                        String aadharNumStr = candidate.optString("aadhar_number");
                        String genderStr = candidate.optString("gender");
                        String dobStr = candidate.optString("dob");
                        String partyNameStr = candidate.optString("party_name");
                        String eName=candidate.optString("election_name");

                        runOnUiThread(() -> {
                            // Set text fields
                            firstName.setText(firstNameStr);
                            lastName.setText(lastNameStr);
                            aadharNum.setText(aadharNumStr);
                            gender.setText(genderStr);
                            dob.setText(dobStr);
                            partyName.setText(partyNameStr);
                            electionName.setText(eName);

                            // Load the image
                            if (imageUrl != null && !imageUrl.isEmpty()) {
                                loadAadharImage(imageUrl);
                            } else {
                                cAadharImg.setImageResource(R.drawable.indiavotefinal); // Default image if missing
                            }
                        });

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    private void verifyCandidate(boolean isAccepted) {
        String candidateId = candidatesId.get(idx);
        JSONObject payload = new JSONObject();
        try {

            if (!isAccepted) {
                payload.put("is_verified", JSONObject.NULL);
                payload.put("message", message.getText().toString());
            }else{
                payload.put("is_verified", isAccepted);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        RequestBody body = RequestBody.create(MediaType.parse("application/json"), payload.toString());
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/election_candidates?id=eq." + candidateId)
                .addHeader("apikey", SUPABASE_KEY)
                .addHeader("Content-Type", "application/json")
                .addHeader("Prefer", "return=representation") // Important for updates
                .patch(body)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), e.getMessage(), Toast.LENGTH_LONG).show());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String responseBody = response.body().string();
                Log.d("onResponse: ", responseBody);
                if (response.isSuccessful()) {
                    runOnUiThread(() -> {
                        idx++;
                        if (idx < candidatesId.size()) updateUser(candidatesId.get(idx));
                        else done();
                    });
                } else {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Failed to update", Toast.LENGTH_LONG).show());
                }
            }
        });
    }
    private void loadAadharImage(String imageUrl) {
        Request request = new Request.Builder()
                .url(imageUrl)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> {
                    Toast.makeText(getApplicationContext(), "Failed to load image", Toast.LENGTH_LONG).show();
                    Log.e("AadharImageError", "Failed to load image", e);
                });
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (!response.isSuccessful()) {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Error fetching image", Toast.LENGTH_LONG).show());
                    return;
                }

                byte[] imageBytes = response.body().bytes();
                Bitmap bitmap = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);
                runOnUiThread(() -> cAadharImg.setImageBitmap(bitmap));
            }
        });
    }


    void done() {
        done.setVisibility(View.VISIBLE);
        upparLayout.setVisibility(View.GONE);
    }
}
package com.example.onlinevotingsystem;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;

import androidx.appcompat.app.AppCompatActivity;

import com.google.firebase.auth.FirebaseAuth;

public class ECAMainActivity extends AppCompatActivity {
    private Button makeElectionBtn,reviewVoterBtn,reviewCandidateBtn,calculateResultsBtn,viewResultsBtn,logout;
    protected  void onCreate(Bundle savedInstateState){
        super.onCreate(savedInstateState);
        setContentView(R.layout.activity_eca_main);
        makeElectionBtn = findViewById(R.id.makeElectionPage);
        reviewVoterBtn = findViewById(R.id.reviewVoterDetails);
        reviewCandidateBtn = findViewById(R.id.reviewCandidateDetails);
        calculateResultsBtn = findViewById(R.id.viewAndCalculateResults);
        viewResultsBtn = findViewById(R.id.viewResultsBtn);
        reviewVoterBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(getApplicationContext(), ECAVoterReviewActivity.class));
            }
        });
        logout = findViewById(R.id.logoutECA);
        logout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                SharedPreferences.Editor editor = getSharedPreferences("UserSession", MODE_PRIVATE).edit();
                editor.clear();
                editor.apply();

                startActivity(new Intent(getApplicationContext(), LoginActivity.class));
                finish();
            }
        });
        makeElectionBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(getApplicationContext(),MakeElectionActivity.class));
            }
        });
        reviewCandidateBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(getApplicationContext(), ECACandidateReviewActivity.class));
            }
        });
        calculateResultsBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(getApplicationContext(), ElectionCalculateResults.class));
            }
        });
        viewResultsBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(getApplicationContext(), ResultsActivity.class));
            }
        });
    }
}
package com.example.onlinevotingsystem;

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class ECAVoterReviewActivity extends AppCompatActivity {
    private static final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co";
    private static final String SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";
    private ArrayList<String> voterIds = new ArrayList<>();
    private int idx = 0;

    private TextView firstName, lastName, aadharNum, gender, dob;
    private EditText message;
    private Button vAccept, vDecline, backToMain, backToMain2;
    private ImageView vAadharImg;
    private LinearLayout upperLayout, doneBtn;
    private final OkHttpClient client = new OkHttpClient();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_eca_voter_review);

        vAccept = findViewById(R.id.vAccept);
        vDecline = findViewById(R.id.vDecline);
        firstName = findViewById(R.id.vFirstName);
        lastName = findViewById(R.id.vLastName);
        aadharNum = findViewById(R.id.vAadharNum);
        gender = findViewById(R.id.vGender);
        dob = findViewById(R.id.vDob);
        message = findViewById(R.id.vReviewMessage);
        vAadharImg = findViewById(R.id.vAadharImg);
        upperLayout = findViewById(R.id.upperLayoutVoter);
        doneBtn = findViewById(R.id.doneLayout);
        backToMain = findViewById(R.id.backToMainFromReviewVoter);
        backToMain2 = findViewById(R.id.backToMainFromReviewVoter2);

        backToMain.setOnClickListener(v -> {
//            startActivity(new Intent(getApplicationContext(), ECAMainActivity.class));
            finish();
        });
        backToMain2.setOnClickListener(v -> {
//            startActivity(new Intent(getApplicationContext(), ECAMainActivity.class));
            finish();
        });

        fetchUnverifiedVoters();

        vAccept.setOnClickListener(v -> verifyVoter(true));
        vDecline.setOnClickListener(v -> verifyVoter(false));
    }

    private void fetchUnverifiedVoters() {
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/user_data?is_verified=eq.false")
                .addHeader("apikey", SUPABASE_API_KEY)
                .addHeader("Authorization", "Bearer " + SUPABASE_API_KEY)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Error fetching voters", Toast.LENGTH_LONG).show());
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (response.isSuccessful()) {
                    try {
                        JSONArray jsonArray = new JSONArray(response.body().string());
                        for (int i = 0; i < jsonArray.length(); i++) {
                            voterIds.add(jsonArray.getJSONObject(i).getString("id"));
                        }
                        runOnUiThread(() -> {
                            if (!voterIds.isEmpty()) updateUser(voterIds.get(idx));
                            else done();
                        });
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    private void updateUser(String uid) {
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/user_data?id=eq." + uid)
                .addHeader("apikey", SUPABASE_API_KEY)
                .addHeader("Authorization", "Bearer " + SUPABASE_API_KEY)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {}

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (response.isSuccessful()) {
                    try {
                        JSONObject voter = new JSONArray(response.body().string()).getJSONObject(0);
                        String img=voter.optString("image_url");
                        runOnUiThread(() -> {
                            firstName.setText(voter.optString("first_name"));
                            lastName.setText(voter.optString("last_name"));
                            aadharNum.setText(voter.optString("aadhar_number"));
                            gender.setText(voter.optString("gender"));
                            dob.setText(voter.optString("dob"));
                            loadAadharImage(img);
                        });
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    private void loadAadharImage(String imageUrl) {
        if (imageUrl == null || imageUrl.isEmpty()) {
            runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Invalid Image URL", Toast.LENGTH_LONG).show());
            return;
        }

        Request request = new Request.Builder()
                .url(imageUrl)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Failed to load image", Toast.LENGTH_LONG).show());
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (!response.isSuccessful()) {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Error fetching image", Toast.LENGTH_LONG).show());
                    return;
                }

                byte[] imageBytes = response.body().bytes();
                Bitmap bitmap = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);
                runOnUiThread(() -> vAadharImg.setImageBitmap(bitmap));
            }
        });
    }


    private void verifyVoter(boolean accept) {
        String uid = voterIds.get(idx);
        JSONObject json = new JSONObject();
        try {

            if(!accept){
                json.put("is_verified", JSONObject.NULL);
                json.put("message", message.getText().toString());
            }else{
                json.put("is_verified", accept);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        RequestBody body = RequestBody.create(json.toString(), MediaType.parse("application/json"));
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/user_data?id=eq." + uid)
                .patch(body)
                .addHeader("apikey", SUPABASE_API_KEY)
                .addHeader("Authorization", "Bearer " + SUPABASE_API_KEY)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {}
            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                runOnUiThread(() -> {
                    idx++;
                    if (idx < voterIds.size()) updateUser(voterIds.get(idx));
                    else done();
                });
            }
        });
    }

    private void done() {
        doneBtn.setVisibility(View.VISIBLE);
        upperLayout.setVisibility(View.GONE);
    }
}
package com.example.onlinevotingsystem;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.cardview.widget.CardView;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class ECInfoActivity extends AppCompatActivity {
    private Button goToEditPage, goToResultsPage, logout;
    private TextView messageText;
    private CardView cardView;
    private static final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co";
    private static final String SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";
    private static String USER_ID; // Replace with actual user ID

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_ec_info);

        goToEditPage = findViewById(R.id.goToMainPage);
        goToResultsPage = findViewById(R.id.goToResultsPage);
        messageText = findViewById(R.id.messageTxt);
        cardView = findViewById(R.id.reviewTextCandidate);
        logout = findViewById(R.id.logoutCandidate);
        USER_ID=getUserIdFromSession();
        fetchCandidateStatus();

        logout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                logoutUser();
            }
        });

        goToEditPage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(getApplicationContext(), ECMainActivity.class));
            }
        });

        goToResultsPage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(getApplicationContext(), ResultsActivity.class));
            }
        });
    }

    private void fetchCandidateStatus() {
        OkHttpClient client = new OkHttpClient();

        // Supabase request to fetch candidate data
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/election_candidates?user_id=eq." + USER_ID)
                .addHeader("apikey", SUPABASE_API_KEY)
                .addHeader("Authorization", "Bearer " + SUPABASE_API_KEY)
                .addHeader("Accept", "application/json")
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                Log.e("Supabase Error", "Request failed: " + e.getMessage());
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (response.isSuccessful()) {
                    String responseBody = response.body().string();
                    try {
                        JSONArray jsonArray = new JSONArray(responseBody); // Parse response as JSON array

                        if (jsonArray.length() > 0) { // Ensure there is at least one object
                            JSONObject jsonObject = jsonArray.getJSONObject(0); // Get first object

                            final Boolean isVerified; // Declare as final

                            if (jsonObject.has("is_verified") && !jsonObject.isNull("is_verified")) {
                                isVerified = jsonObject.optBoolean("is_verified"); // Will be true or false if present
                            } else {
                                isVerified = null; // Explicitly set null if not found
                            }

                            String message = jsonObject.optString("message", "");

                            runOnUiThread(() -> updateUI(isVerified, message));
                        } else {
                            Log.e("Supabase JSON Error", "No data found in response.");
                        }
                    } catch (Exception e) {
                        Log.e("Supabase JSON Error", "Parsing error: " + e.getMessage());
                    }
                } else {
                    Log.e("Supabase Error", "Response unsuccessful: " + response.code());
                }
            }

        });
    }

    private void updateUI(Boolean isVerified, String message) {

        if (isVerified == null) {
            messageText.setText("Verification status is pending. " + message);
            cardView.setCardBackgroundColor(Color.YELLOW);
            messageText.setTextColor(Color.BLACK);
        } else if (isVerified) {
            messageText.setText("Profile verified. Authorized for enrolling in elections.");
            cardView.setCardBackgroundColor(Color.GREEN);
            messageText.setTextColor(Color.BLACK);
        } else {
            messageText.setText("You are not authorized to enroll in elections.");
            cardView.setCardBackgroundColor(Color.RED);
            messageText.setTextColor(Color.WHITE);
        }
    }

    private String getUserIdFromSession() {
        SharedPreferences sharedPreferences = getSharedPreferences("UserSession", Context.MODE_PRIVATE);
        String id=sharedPreferences.getString("userId", "");
        return id;
    }

    private void logoutUser() {
        SharedPreferences.Editor editor = getSharedPreferences("UserSession", MODE_PRIVATE).edit();
        editor.clear();
        editor.apply();

        startActivity(new Intent(getApplicationContext(), LoginActivity.class));
        finish();
    }
}
package com.example.onlinevotingsystem;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.provider.OpenableColumns;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class ECMainActivity extends AppCompatActivity {
    private static final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co";
    private static final String SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";
    private static final String SUPABASE_STORAGE_BUCKET = "user_uploads";

    private Button submitBtn, chooseFileBtn, goBackToInfoPage;
    private EditText firstName, lastName, aadharNumber, partyName;
    private RadioButton genderMale, genderFemale, genderOthers;
    private RadioGroup genderGrp;
    private DatePicker datePicker;
    private LinearLayout cardView;
    private SharedPreferences sharedPreferences;
    private static final int REQUEST_CODE_FILES = 1;
    private Uri fileUri;
    private String userId,name;
    private Spinner electionSpinner;
    private OkHttpClient client = new OkHttpClient();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_ec_main);

        submitBtn = findViewById(R.id.submitBtn);
        goBackToInfoPage = findViewById(R.id.goBackToInfoPage);
        firstName = findViewById(R.id.firstName);
        lastName = findViewById(R.id.lastName);
        partyName = findViewById(R.id.partyName);
        aadharNumber = findViewById(R.id.aadharNumber);
        genderMale = findViewById(R.id.male);
        genderFemale = findViewById(R.id.female);
        genderOthers = findViewById(R.id.others);
        datePicker = findViewById(R.id.datePicker);
        chooseFileBtn = findViewById(R.id.chooseFileBtn);
        genderGrp = findViewById(R.id.genderGrp);
        cardView = findViewById(R.id.uploadEC);
        electionSpinner = findViewById(R.id.electionSpinner);
        fetchElectionNames();
        userId=getUserIdFromSession();
        name="";
        sharedPreferences = getSharedPreferences("UserSession", Context.MODE_PRIVATE);
        fetchCandidateData();
        chooseFileBtn.setOnClickListener(v -> selectFile());
        submitBtn.setOnClickListener(v -> submitData());
        goBackToInfoPage.setOnClickListener(v -> startActivity(new Intent(getApplicationContext(), ECInfoActivity.class)));
    }

    private void fetchElectionNames() {
        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/elections?select=election_name")
                .addHeader("apikey", SUPABASE_API_KEY)
                .addHeader("Authorization", "Bearer " + SUPABASE_API_KEY)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                runOnUiThread(() ->
                        Toast.makeText(ECMainActivity.this, "Failed to fetch data", Toast.LENGTH_SHORT).show()
                );
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (response.isSuccessful()) {
                    try {
                        String responseData = response.body().string();
                        JSONArray jsonArray = new JSONArray(responseData);
                        List<String> electionList = new ArrayList<>();

                        for (int i = 0; i < jsonArray.length(); i++) {
                            JSONObject jsonObject = jsonArray.getJSONObject(i);
                            electionList.add(jsonObject.getString("election_name"));
                        }

                        runOnUiThread(() -> populateSpinner(electionList));

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }
    // Validate name: Only letters, no numbers or special characters
    private boolean isValidName(String name) {
        return name.matches("^[a-zA-Z]+$");
    }

    // Validate Aadhar number: Exactly 12 digits
    private boolean isValidAadhar(String aadhar) {
        return aadhar.matches("^[0-9]{12}$");
    }

    // Check if user is 18 years old
    private boolean isValidAge(int year, int month, int day) {
        int currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR);
        int age = currentYear - year;
        return age >= 18;
    }

    private void populateSpinner(List<String> electionList) {
        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_dropdown_item, electionList);
        electionSpinner.setAdapter(adapter);
    }
    private String getUserIdFromSession() {
        SharedPreferences sharedPreferences = getSharedPreferences("UserSession", Context.MODE_PRIVATE);
        String id=sharedPreferences.getString("userId", "");
        return id;
    }
    private String getUsername() {
        SharedPreferences sharedPreferences = getSharedPreferences("UserSession", Context.MODE_PRIVATE);
        String name=sharedPreferences.getString("first_name", "");
        return name;
    }
    private void fetchCandidateData() {
        String userId = getUserIdFromSession();
        if (userId.isEmpty()) {
            Toast.makeText(this, "User ID not found", Toast.LENGTH_SHORT).show();
            return;
        }

        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/election_candidates?user_id=eq." + userId)
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .header("Content-Type", "application/json")
                .get()
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> Toast.makeText(ECMainActivity.this, "Failed to load data: " + e.getMessage(), Toast.LENGTH_LONG).show());
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (response.isSuccessful()) {
                    String responseBody = response.body().string();
                    try {
                        JSONArray jsonArray = new JSONArray(responseBody);
                        if (jsonArray.length() > 0) {
                            JSONObject candidate = jsonArray.getJSONObject(0);
                            runOnUiThread(() -> populateFields(candidate));
                            name = candidate.optString("first_name", "");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    private void checkUserSession() {
        if (sharedPreferences.contains("first_name")) {
            Intent intent = new Intent(ECMainActivity.this, ECInfoActivity.class);
            startActivity(intent);
            finish();
        }
    }

    private void selectFile() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("*/*");
        startActivityForResult(Intent.createChooser(intent, "Select File"), REQUEST_CODE_FILES);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_CODE_FILES && resultCode == RESULT_OK && data != null && data.getData() != null) {
            fileUri = data.getData();
            cardView.setVisibility(View.VISIBLE);
        }
    }

    private void submitData() {
        String fName = firstName.getText().toString().trim();
        String lName = lastName.getText().toString().trim();
        String aadharNum = aadharNumber.getText().toString().trim();
        String pName = partyName.getText().toString().trim();
        String gender = genderMale.isChecked() ? "male" : genderFemale.isChecked() ? "female" : genderOthers.isChecked() ? "others" : "";
        String dob = datePicker.getDayOfMonth() + "/" + (datePicker.getMonth() + 1) + "/" + datePicker.getYear();
        String electionName = electionSpinner.getSelectedItem() != null ? electionSpinner.getSelectedItem().toString() : "";

        // Validate each field
        if (!isValidName(fName)) {
            firstName.setError("Enter a valid first name (letters only)");
            return;
        }
        if (!isValidName(lName)) {
            lastName.setError("Enter a valid last name (letters only)");
            return;
        }
        if (!isValidAadhar(aadharNum)) {
            aadharNumber.setError("Aadhar must be exactly 12 digits");
            return;
        }
        if (pName.isEmpty()) {
            partyName.setError("Party name cannot be empty");
            return;
        }
        if (gender.isEmpty()) {
            Toast.makeText(this, "Please select a gender", Toast.LENGTH_SHORT).show();
            return;
        }
        if (!isValidAge(datePicker.getYear(), datePicker.getMonth(), datePicker.getDayOfMonth())) {
            Toast.makeText(this, "You must be at least 18 years old to register", Toast.LENGTH_SHORT).show();
            return;
        }
        if (electionName.isEmpty()) {
            Toast.makeText(this, "Please select an election", Toast.LENGTH_SHORT).show();
            return;
        }

        boolean isUpdate = !name.isEmpty(); // Check if candidate already exists

        if (isUpdate) {
            updateCandidateInSupabase(userId, fName, lName, gender, pName, dob, aadharNum, electionName);
        } else {
            if (fileUri == null) {
                Toast.makeText(this, "Please upload a required document", Toast.LENGTH_SHORT).show();
                return;
            }
            uploadFileToSupabase(fileUri, fName, lName, gender, pName, dob, aadharNum, electionName);
        }
    }





    private void uploadFileToSupabase(Uri fileUri, String fName, String lName, String gender, String pName, String dob, String aadharNum,String electionName) {
        File file = getFileFromUri(fileUri);
        if (file == null) {
            runOnUiThread(() -> Toast.makeText(ECMainActivity.this, "File path error!", Toast.LENGTH_LONG).show());
            return;
        }

        RequestBody fileBody = RequestBody.create(file, MediaType.parse("application/octet-stream"));
        RequestBody requestBody = new MultipartBody.Builder().setType(MultipartBody.FORM)
                .addFormDataPart("file", file.getName(), fileBody)
                .build();

        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/storage/v1/object/" + SUPABASE_STORAGE_BUCKET + "/" + file.getName())
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .post(requestBody)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> Toast.makeText(ECMainActivity.this, "File Upload Failed: " + e.getMessage(), Toast.LENGTH_LONG).show());
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                Log.d("onResponseimage: ",response.body().string());
                if (response.isSuccessful()) {
                    String fileUrl = SUPABASE_URL + "/storage/v1/object/public/" + SUPABASE_STORAGE_BUCKET + "/" + file.getName();
                    saveCandidateToSupabase(fName, lName, gender, pName, dob, aadharNum, fileUrl,electionName);
                }
            }
        });
    }

    private void saveCandidateToSupabase(String fName, String lName, String gender, String pName, String dob, String aadharNum, String fileUrl, String electionName) {
        Map<String, String> candidate = new HashMap<>();
        candidate.put("first_name", fName);
        candidate.put("last_name", lName);
        candidate.put("gender", gender);
        candidate.put("party_name", pName);
        candidate.put("dob", dob);
        candidate.put("aadhar_number", aadharNum);
        candidate.put("file_url", fileUrl);
        candidate.put("election_name", electionName); // Added election name
        candidate.put("user_id", userId);

        RequestBody requestBody = RequestBody.create(new JSONObject(candidate).toString(), MediaType.parse("application/json"));
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/election_candidates")
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .header("Content-Type", "application/json")
                .post(requestBody)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> Toast.makeText(ECMainActivity.this, "Submission Failed: " + e.getMessage(), Toast.LENGTH_LONG).show());
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                Log.d("onResponse: ",response.body().string());
                runOnUiThread(() -> {
                    Toast.makeText(ECMainActivity.this, "Submitted Successfully!", Toast.LENGTH_LONG).show();
                    startActivity(new Intent(getApplicationContext(), ECInfoActivity.class));
                });
            }
        });
    }


    private void populateFields(JSONObject candidate) {
        try {
            firstName.setText(candidate.getString("first_name"));
            lastName.setText(candidate.getString("last_name"));
            partyName.setText(candidate.getString("party_name"));
            aadharNumber.setText(candidate.getString("aadhar_number"));

            // Set Gender
            String gender = candidate.getString("gender");
            if (gender.equalsIgnoreCase("male")) {
                genderMale.setChecked(true);
            } else if (gender.equalsIgnoreCase("female")) {
                genderFemale.setChecked(true);
            } else {
                genderOthers.setChecked(true);
            }

            // Set Date of Birth
            try {
                String dob = candidate.getString("dob").trim(); // Expected format: yyyy-MM-dd
                Log.d("DOBDebug", "Received DOB: " + dob); // Debugging

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                sdf.setLenient(false); // Ensure strict date parsing
                Date date = sdf.parse(dob);

                if (date != null) {
                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(date);
                    int day = calendar.get(Calendar.DAY_OF_MONTH);
                    int month = calendar.get(Calendar.MONTH);
                    int year = calendar.get(Calendar.YEAR);

                    datePicker.post(() -> datePicker.updateDate(year, month, day));
                } else {
                    Log.e("DateError", "Parsed date is null");
                }
            } catch (ParseException e) {
                Log.e("DateError", "Failed to parse date: " + e.getMessage());
            }

            // Set Election Spinner selection
            electionSpinner.post(() -> {
                try {
                    String electionName = candidate.getString("election_name").trim();
                    for (int i = 0; i < electionSpinner.getCount(); i++) {
                        String item = electionSpinner.getItemAtPosition(i).toString().trim();
                        if (item.equalsIgnoreCase(electionName)) {
                            electionSpinner.setSelection(i);
                            break;
                        }
                    }
                } catch (JSONException e) {
                    Log.e("ElectionError", "Failed to get election_name: " + e.getMessage());
                }
            });

        } catch (JSONException e) {
            Log.e("JSONError", "Failed to populate fields: " + e.getMessage());
        }
    }




    private void updateCandidateInSupabase(String candidateId, String fName, String lName, String gender, String pName, String dob, String aadharNum, String electionName) {
        Map<String, String> updatedCandidate = new HashMap<>();
        updatedCandidate.put("first_name", fName);
        updatedCandidate.put("last_name", lName);
        updatedCandidate.put("gender", gender);
        updatedCandidate.put("party_name", pName);
        updatedCandidate.put("dob", dob);
        updatedCandidate.put("is_verified", String.valueOf(false));
        updatedCandidate.put("aadhar_number", aadharNum);
        updatedCandidate.put("election_name", electionName); // Added election name

        RequestBody requestBody = RequestBody.create(new JSONObject(updatedCandidate).toString(), MediaType.parse("application/json"));

        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/election_candidates?user_id=eq." + candidateId)
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .header("Content-Type", "application/json")
                .patch(requestBody)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> Toast.makeText(ECMainActivity.this, "Update Failed: " + e.getMessage(), Toast.LENGTH_LONG).show());
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                runOnUiThread(() -> {
                    Toast.makeText(ECMainActivity.this, "Updated Successfully!", Toast.LENGTH_LONG).show();
                    startActivity(new Intent(getApplicationContext(), ECInfoActivity.class));
                });
            }
        });
    }


    private File getFileFromUri(Uri uri) {
        try {
            Cursor cursor = getContentResolver().query(uri, null, null, null, null);
            cursor.moveToFirst();
            @SuppressLint("Range") String fileName = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
            File file = new File(getCacheDir(), fileName);
            InputStream inputStream = getContentResolver().openInputStream(uri);
            FileOutputStream outputStream = new FileOutputStream(file);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = inputStream.read(buffer)) > 0) {
                outputStream.write(buffer, 0, length);
            }
            inputStream.close();
            outputStream.close();
            return file;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    private void saveToSharedPreferences(String fName, String lName, String gender, String pName, String dob, String aadharNum) {
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putString("first_name", fName);
        editor.putString("last_name", lName);
        editor.putString("gender", gender);
        editor.putString("party_name", pName);
        editor.putString("dob", dob);
        editor.putString("aadhar_number", aadharNum);
        editor.apply();
    }
}
package com.example.onlinevotingsystem;

public class Election {
    String electionName,startDate,endDate,results,isDone;

    public Election(String electionName, String startDate, String endDate,String results,String isDone) {
        this.electionName = electionName;
        this.startDate = startDate;
        this.endDate = endDate;
        this.results = results;
        this.isDone = isDone;
    }

    public String getElectionName() {
        return electionName;
    }

    public void setElectionName(String electionName) {
        this.electionName = electionName;
    }

    public String getStartDate() {
        return startDate;
    }

    public void setStartDate(String startDate) {
        this.startDate = startDate;
    }

    public String getEndDate() {
        return endDate;
    }

    public void setEndDate(String endDate) {
        this.endDate = endDate;
    }

    public String getResults() {
        return results;
    }

    public void setResults(String results) {
        this.results = results;
    }

    public String getIsDone() {
        return isDone;
    }

    public void setIsDone(String isDone) {
        this.isDone = isDone;
    }
}
package com.example.onlinevotingsystem;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class ElectionActivity extends AppCompatActivity {

    private static final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co";
    private static final String SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";

    private Button chooseElectionCandidateBtn, goToAllElections;
    private String curElectionName,partyName;
    private TextView electionTxtView;
    private RecyclerView recyclerViewCandidates;
    private ElectionCandidateListAdapter adapter;
    private OkHttpClient client = new OkHttpClient();
    private List<String> candidateNames = new ArrayList<>();
    private String selectedCandidate = null;
    private String seletedCandidate2;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_election);

        // Retrieve election name from Intent
        curElectionName = getIntent().getStringExtra("electionName");
        partyName="";
        // Initialize UI components
        chooseElectionCandidateBtn = findViewById(R.id.chooseElectionCandidateBtn);
        recyclerViewCandidates = findViewById(R.id.recyclerViewCandidates);
        electionTxtView = findViewById(R.id.electionTxtView);
        goToAllElections = findViewById(R.id.goToAllElections);
        seletedCandidate2="";

        // Set election name on screen
        electionTxtView.setText(curElectionName);

        // Navigate to All Elections page
        goToAllElections.setOnClickListener(v -> startActivity(new Intent(getApplicationContext(), ShowAllCurrentElections.class)));

        // Set up RecyclerView
        recyclerViewCandidates.setLayoutManager(new LinearLayoutManager(this));
        adapter = new ElectionCandidateListAdapter(candidateNames, this::onCandidateSelected);
        recyclerViewCandidates.setAdapter(adapter);

        // Fetch election candidates from Supabase
        fetchCandidates();

        // Handle vote submission
        chooseElectionCandidateBtn.setOnClickListener(v -> checkVoterVerification());
    }

    private void fetchCandidates() {
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/election_candidates?election_name=eq." + curElectionName + "&select=*")
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (!response.isSuccessful()) {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Failed to fetch candidates", Toast.LENGTH_SHORT).show());
                    return;
                }

                try {
                    JSONArray candidatesArray = new JSONArray(response.body().string());
                    List<String> newCandidateNames = new ArrayList<>(); // Store new list

                    for (int i = 0; i < candidatesArray.length(); i++) {
                        JSONObject candidate = candidatesArray.getJSONObject(i);
                        boolean isVerified = candidate.getBoolean("is_verified");
                        String party = candidate.getString("party_name");
                        String fullName = candidate.getString("first_name") + " " + candidate.getString("last_name");

                        if (isVerified) {
                            newCandidateNames.add(party + " - " + fullName);
                        }
                    }

                    // Update UI on main thread
                    runOnUiThread(() -> {
                        candidateNames.clear();
                        candidateNames.addAll(newCandidateNames);
                        adapter.notifyDataSetChanged();
                    });
                } catch (JSONException e) {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Error parsing candidates", Toast.LENGTH_SHORT).show());
                }
            }

            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Network error: " + e.getMessage(), Toast.LENGTH_SHORT).show());
            }
        });
    }


    private void onCandidateSelected(String candidate) {
        selectedCandidate = candidate;
        String[] parts = candidate.split(" - ", 2); // Split into [party, candidateName]
        if (parts.length == 2) {
            partyName = parts[0];
            seletedCandidate2 = parts[1];
        }
    }


    private String getUserIdFromSession() {
        SharedPreferences sharedPreferences = getSharedPreferences("UserSession", Context.MODE_PRIVATE);
        return sharedPreferences.getString("userId", "");
    }

    private void checkVoterVerification() {
        String userId = getUserIdFromSession();

        if (userId.isEmpty()) {
            Toast.makeText(getApplicationContext(), "User not logged in", Toast.LENGTH_SHORT).show();
            return;
        }

        String checkUserUrl = SUPABASE_URL + "/rest/v1/user_data?user_id=eq." + userId + "&select=is_verified";

        Request checkUserRequest = new Request.Builder()
                .url(checkUserUrl)
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .build();

        client.newCall(checkUserRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (!response.isSuccessful()) {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "You are not Verified yet", Toast.LENGTH_SHORT).show());
                    return;
                }

                try {
                    JSONArray userArray = new JSONArray(response.body().string());
                    if (userArray.length() > 0) {
                        boolean isVerified = userArray.getJSONObject(0).getBoolean("is_verified");

                        if (isVerified) {
                            checkIfVoted(userId);
                        } else {
                            runOnUiThread(() -> Toast.makeText(getApplicationContext(), "You are not a verified voter!", Toast.LENGTH_LONG).show());
                        }
                    }
                } catch (JSONException e) {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "You are not a verified voter!", Toast.LENGTH_SHORT).show());
                }
            }

            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Network error: " + e.getMessage(), Toast.LENGTH_SHORT).show());
            }
        });
    }

    private void checkIfVoted(String userId) {
        String checkVoteUrl = SUPABASE_URL + "/rest/v1/election_votes?user_id=eq." + userId + "&election_name=eq." + curElectionName + "&select=*";

        Request checkVoteRequest = new Request.Builder()
                .url(checkVoteUrl)
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .build();

        client.newCall(checkVoteRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (!response.isSuccessful()) {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Error checking vote status", Toast.LENGTH_SHORT).show());
                    return;
                }

                try {
                    String responseBody = response.body().string();
                    JSONArray voteArray = new JSONArray(responseBody);

                    if (voteArray.length() > 0) {
                        runOnUiThread(() -> Toast.makeText(getApplicationContext(), "You have already voted in this election", Toast.LENGTH_SHORT).show());
                    } else {
                        submitVote(userId);
                    }
                } catch (JSONException e) {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Error parsing response", Toast.LENGTH_SHORT).show());
                }
            }

            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Network error: " + e.getMessage(), Toast.LENGTH_SHORT).show());
            }
        });
    }

    private void submitVote(String userId) {
        if (selectedCandidate == null) {
            runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Please select a candidate!", Toast.LENGTH_LONG).show());
            return;
        }

        JSONObject voteData = new JSONObject();
        try {
            voteData.put("user_id", userId);
            voteData.put("party_name", partyName);  // Now correctly set
            voteData.put("election_name", curElectionName);
            voteData.put("candidate", seletedCandidate2);  // Now correctly set
        } catch (JSONException e) {
            e.printStackTrace();
            return;
        }

        RequestBody body = RequestBody.create(MediaType.parse("application/json"), voteData.toString());
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/election_votes")
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .post(body)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (response.isSuccessful()) {
                    runOnUiThread(() -> {
                        Toast.makeText(getApplicationContext(), "Vote submitted successfully", Toast.LENGTH_LONG).show();
                        startActivity(new Intent(getApplicationContext(), ShowAllCurrentElections.class));
                    });
                } else {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Failed to submit vote", Toast.LENGTH_LONG).show());
                }
            }

            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Network error: " + e.getMessage(), Toast.LENGTH_LONG).show());
            }
        });
    }


}
package com.example.onlinevotingsystem;

import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class ElectionCalculateResults extends AppCompatActivity {
    private static final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co";
    private static final String SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";

    private LinearLayout showAllRunningElectionsToCalculate, linearLayout;
    private Button backToMainPage;
    private OkHttpClient client = new OkHttpClient();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_calculate_elections);

        showAllRunningElectionsToCalculate = findViewById(R.id.showAllRunningElectionsToCalculate);
        linearLayout = findViewById(R.id.noOngoingElectionsToEndLayout);
        backToMainPage = findViewById(R.id.backToInfoPageFromMainECA);

        backToMainPage.setOnClickListener(v -> finish());
        fetchRunningElections();
    }

    private void fetchRunningElections() {
        String url = SUPABASE_URL + "/rest/v1/elections?status=eq.false&select=*";

        Request request = new Request.Builder()
                .url(url)
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (!response.isSuccessful()) {
                    return;
                }
                try {
                    JSONArray electionsArray = new JSONArray(response.body().string());
                    runOnUiThread(() -> {
                        showAllRunningElectionsToCalculate.removeAllViews();
                        if (electionsArray.length() == 0) {
                            linearLayout.setVisibility(View.VISIBLE);
                        } else {
                            linearLayout.setVisibility(View.GONE);
                            for (int i = 0; i < electionsArray.length(); i++) {
                                try {
                                    JSONObject election = electionsArray.getJSONObject(i);
                                    String electionName = election.getString("election_name");
                                    Button electionBtn = new Button(getApplicationContext());
                                    electionBtn.setText(electionName);
                                    electionBtn.setOnClickListener(v -> calculateResults(election));
                                    showAllRunningElectionsToCalculate.addView(electionBtn);
                                } catch (JSONException e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    });
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                e.printStackTrace();
            }
        });
    }

    private void calculateResults(JSONObject election) {
        try {
            String electionName = election.getString("election_name");
            int electionId = election.getInt("id");
            String url = SUPABASE_URL + "/rest/v1/election_votes?election_name=eq." + electionName;

            Request request = new Request.Builder()
                    .url(url)
                    .header("apikey", SUPABASE_API_KEY)
                    .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                    .build();

            client.newCall(request).enqueue(new Callback() {
                @RequiresApi(api = Build.VERSION_CODES.N)
                @Override
                public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                    if (!response.isSuccessful()) {
                        return;
                    }
                    try {
                        JSONArray votesArray = new JSONArray(response.body().string());
                        HashMap<String, HashMap<String, Integer>> results = new HashMap<>();

                        for (int i = 0; i < votesArray.length(); i++) {
                            JSONObject vote = votesArray.getJSONObject(i);
                            String partyName = vote.optString("party_name", "Independent");
                            String candidate = vote.getString("candidate");

                            // Ensure party exists in the map
                            results.putIfAbsent(partyName, new HashMap<>());

                            // Get the candidate map for this party
                            HashMap<String, Integer> candidateMap = results.get(partyName);

                            // Update the candidate's vote count
                            candidateMap.put(candidate, candidateMap.getOrDefault(candidate, 0) + 1);
                        }
                        saveResults(electionId, results);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }

                @Override
                public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    e.printStackTrace();
                }
            });
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }



    private void saveResults(int electionId, HashMap<String, HashMap<String, Integer>> results) {
        try {
            JSONArray resultsArray = new JSONArray();

            for (Map.Entry<String, HashMap<String, Integer>> partyEntry : results.entrySet()) {
                String partyName = partyEntry.getKey();
                HashMap<String, Integer> candidateMap = partyEntry.getValue();

                for (Map.Entry<String, Integer> candidateEntry : candidateMap.entrySet()) {
                    JSONObject resultObj = new JSONObject();
                    resultObj.put("election_id", electionId);
                    resultObj.put("party_name", partyName.equals("Independent") ? JSONObject.NULL : partyName); // Allow NULL for Independent candidates
                    resultObj.put("candidate_name", candidateEntry.getKey());
                    resultObj.put("vote_count", candidateEntry.getValue());

                    resultsArray.put(resultObj);
                }
            }

            String url = SUPABASE_URL + "/rest/v1/candidate_results";
            RequestBody body = RequestBody.create(MediaType.parse("application/json"), resultsArray.toString());

            Request request = new Request.Builder()
                    .url(url)
                    .header("apikey", SUPABASE_API_KEY)
                    .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                    .post(body)
                    .build();

            client.newCall(request).enqueue(new Callback() {
                @Override
                public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                    Log.d("onResponsesave: ", response.body().string());
                    if (response.isSuccessful()) {
                        markElectionAsDone(electionId);
                    }
                }

                @Override
                public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    e.printStackTrace();
                }
            });
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }



    private void markElectionAsDone(int electionId) {
        String url = SUPABASE_URL + "/rest/v1/elections?id=eq." + electionId;
        JSONObject jsonBody = new JSONObject();
        try {
            jsonBody.put("status", true);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        RequestBody body = RequestBody.create(MediaType.parse("application/json"), jsonBody.toString());
        Request request = new Request.Builder()
                .url(url)
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .patch(body)
                .build();
        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                Log.d("onResponse: ",response.body().string());
                runOnUiThread(() -> {
                    Toast.makeText(getApplicationContext(), "Election results calculated", Toast.LENGTH_LONG).show();
                    startActivity(new Intent(getApplicationContext(), ECAMainActivity.class));
                    finish();
                });

            }

            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                e.printStackTrace();
            }
        });
    }
}
package com.example.onlinevotingsystem;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RadioButton;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import java.util.List;

public class ElectionCandidateListAdapter extends RecyclerView.Adapter<ElectionCandidateListAdapter.ElectionCandidateListViewHolder> {
    private final List<String> candidateNames;
    private final OnCandidateClickListener listener;
    private int selectedPosition = -1;

    public ElectionCandidateListAdapter(List<String> candidateNames, OnCandidateClickListener listener) {
        this.candidateNames = candidateNames;
        this.listener = listener;
    }

    @NonNull
    @Override
    public ElectionCandidateListViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_candidate_layout, parent, false);
        return new ElectionCandidateListViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull ElectionCandidateListViewHolder holder, int position) {
        String candidateName = candidateNames.get(position);
        holder.candidateName.setText(candidateName);
        holder.radioButton.setChecked(position == selectedPosition);

        holder.radioButton.setOnClickListener(v -> {
            selectedPosition = holder.getAdapterPosition();
            listener.onCandidateSelected(candidateName);
            notifyDataSetChanged();
        });
    }

    @Override
    public int getItemCount() {
        return candidateNames.size();
    }

    public interface OnCandidateClickListener {
        void onCandidateSelected(String candidate);
    }

    public static class ElectionCandidateListViewHolder extends RecyclerView.ViewHolder {
        TextView candidateName;
        RadioButton radioButton;

        public ElectionCandidateListViewHolder(@NonNull View itemView) {
            super(itemView);
            candidateName = itemView.findViewById(R.id.candidateName);
            radioButton = itemView.findViewById(R.id.rdCandidateValue);
        }
    }
}
package com.example.onlinevotingsystem;

public class ElectionResultActivity {
}
package com.example.onlinevotingsystem;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.cardview.widget.CardView;

import org.json.JSONArray;
import org.json.JSONObject;
import java.io.IOException;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class InfoActivity extends AppCompatActivity {
    private Button goToPendingElectionsPage, goToEditPage, vGoToResultsPage, logout;
    private CardView cardView;
    private TextView messageText;

    // Supabase Credentials (Replace with your actual details)
    private static final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co";
    private static final String SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";
    private static final String SUPABASE_TABLE = "user_data";

    private String userId; // Store user ID for requests
    private OkHttpClient client = new OkHttpClient(); // OkHttp Client

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_info);

        goToPendingElectionsPage = findViewById(R.id.goToPendingElectionsActivity);
        goToEditPage = findViewById(R.id.goToMainPage);
        vGoToResultsPage = findViewById(R.id.vGoToResultsPage);
        messageText = findViewById(R.id.messageTxt);
        logout = findViewById(R.id.logout);
        cardView = findViewById(R.id.reviewTextVoter);

        // Get user ID from saved session (replace with your own method)
        userId = getUserIdFromSession();
        if (userId == null) {
            startActivity(new Intent(InfoActivity.this, LoginActivity.class));
            finish();
            return;
        }

        fetchUserData();

        logout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                logoutUser();
            }
        });

        goToPendingElectionsPage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(getApplicationContext(), ShowAllCurrentElections.class));
            }
        });

        goToEditPage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(getApplicationContext(), MainActivity.class));
            }
        });

        vGoToResultsPage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(getApplicationContext(), ResultsActivity.class));
            }
        });
    }

    private void fetchUserData() {
        String url = SUPABASE_URL + "/rest/v1/" + SUPABASE_TABLE + "?user_id=eq." + userId;

        Request request = new Request.Builder()
                .url(url)
                .header("apikey", SUPABASE_ANON_KEY)
                .header("Authorization", "Bearer " + SUPABASE_ANON_KEY)
                .header("Content-Type", "application/json")
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                runOnUiThread(() -> {
                    messageText.setText("Error fetching data.");
                    Toast.makeText(InfoActivity.this, "Network Error", Toast.LENGTH_SHORT).show();
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
//                Log.d("onResponse: ",response.body().string());
                if (!response.isSuccessful()) {
                    runOnUiThread(() -> messageText.setText("Failed to load profile data."));
                    return;
                }

                try {
                    JSONArray jsonArray = new JSONArray(response.body().string());
                    if (jsonArray.length() > 0) {
                        JSONObject userData = jsonArray.getJSONObject(0);
                        final Boolean isVerified; // Declare as final

                        if (userData.has("is_verified") && !userData.isNull("is_verified")) {
                            isVerified = userData.optBoolean("is_verified"); // Will be true or false if present
                        } else {
                            isVerified = null; // Explicitly set null if not found
                        }

                        final String message = userData.optString("message", "");

                        runOnUiThread(() -> {
                            if (isVerified == null) {
                                messageText.setText("Verification status is pending. " + message);
                                cardView.setCardBackgroundColor(Color.YELLOW);
                                messageText.setTextColor(Color.BLACK);
                            } else if (isVerified) {
                                messageText.setText("Profile verified. Authorized for Voting.");
                                cardView.setCardBackgroundColor(Color.GREEN);
                                messageText.setTextColor(Color.BLACK);
                            } else {
                                messageText.setText("You are not authorized to enroll in elections.");
                                cardView.setCardBackgroundColor(Color.RED);
                                messageText.setTextColor(Color.WHITE);
                            }
                        });
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    runOnUiThread(() -> messageText.setText("Error parsing data."));
                }
            }
        });
    }

    private void logoutUser() {
        // Clear session storage (implement your own method)
        clearUserSession();
        startActivity(new Intent(getApplicationContext(), LoginActivity.class));
        finish();
    }

    private String getUserIdFromSession() {
        SharedPreferences sharedPreferences = getSharedPreferences("UserSession", Context.MODE_PRIVATE);
        String id=sharedPreferences.getString("userId", "");
        return id;
    }

    private void clearUserSession() {
        SharedPreferences.Editor editor = getSharedPreferences("UserSession", MODE_PRIVATE).edit();
        editor.clear();
        editor.apply();

        startActivity(new Intent(getApplicationContext(), LoginActivity.class));
        finish();
    }
}
package com.example.onlinevotingsystem;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import java.io.IOException;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class LoginActivity extends AppCompatActivity {

    private EditText emailTextView, passwordTextView;
    private Button Btn, btnECA, btnEC, backToRegisterBtn;
    private ProgressBar progressBar;
    public static String curUserType;

    private OkHttpClient client;
    private static final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co";
    private static final String SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";
    private static final String PREF_NAME = "UserSession";

    private SharedPreferences sharedPreferences;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);

        client = new OkHttpClient();
        sharedPreferences = getSharedPreferences(PREF_NAME, MODE_PRIVATE);

        emailTextView = findViewById(R.id.emailLogin);
        passwordTextView = findViewById(R.id.password);
        Btn = findViewById(R.id.login);
        btnECA = findViewById(R.id.loginECA);
        progressBar = findViewById(R.id.progressBar);
        btnEC = findViewById(R.id.loginEC);
        backToRegisterBtn = findViewById(R.id.backToRegisterBtn);

        checkSession();

        Btn.setOnClickListener(v -> loginUserAccount("voter"));
        btnEC.setOnClickListener(v -> loginUserAccount("ec"));
        btnECA.setOnClickListener(v -> handleECALogin());
        backToRegisterBtn.setOnClickListener(v -> startActivity(new Intent(getApplicationContext(), RegisterActivity.class)));
    }

    private void checkSession() {
        String userType = sharedPreferences.getString("user_type", "");
        if (!userType.isEmpty()) {
            navigateToMainActivity(userType);
        }
    }

    private void loginUserAccount(final String type) {
        progressBar.setVisibility(View.VISIBLE);
        curUserType = type;

        String email = emailTextView.getText().toString();
        String password = passwordTextView.getText().toString();

        if (TextUtils.isEmpty(email) || TextUtils.isEmpty(password)) {
            showToast("Please enter email and password!");
            progressBar.setVisibility(View.GONE);
            return;
        }

        MediaType JSON = MediaType.parse("application/json; charset=utf-8");
        JsonObject json = new JsonObject();
        json.addProperty("email", email);
        json.addProperty("password", password);
        RequestBody body = RequestBody.create(json.toString(), JSON);

        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/auth/v1/token?grant_type=password")
                .post(body)
                .addHeader("apikey", SUPABASE_API_KEY)
                .addHeader("Content-Type", "application/json")
                .build();

        client.newCall(request).enqueue(new okhttp3.Callback() {
            @Override
            public void onFailure(okhttp3.Call call, IOException e) {
                runOnUiThread(() -> {
                    showToast("Login failed: " + e.getMessage());
                    progressBar.setVisibility(View.GONE);
                });
            }

            @Override
            public void onResponse(okhttp3.Call call, Response response) throws IOException {
                if (response.isSuccessful()) {
                    String responseBody = response.body().string();
                    JsonObject responseObject = JsonParser.parseString(responseBody).getAsJsonObject();
                    String userId = responseObject.has("user") ? responseObject.getAsJsonObject("user").get("id").getAsString() : "";
                    saveUserSession(userId,email, type);
                    runOnUiThread(() -> {
                        showToast("Login successful!");
                        navigateToMainActivity(type);
                        progressBar.setVisibility(View.GONE);
                    });
                } else {
                    runOnUiThread(() -> {
                        showToast("Login failed! Check your credentials.");
                        progressBar.setVisibility(View.GONE);
                    });
                }
            }
        });
    }

    private void handleECALogin() {
        progressBar.setVisibility(View.VISIBLE);
        String email = emailTextView.getText().toString();
        String password = passwordTextView.getText().toString();

        if (!email.equals("eca@gov.in") || !password.equals("eca123")) {
            showToast("Invalid ECA credentials");
            progressBar.setVisibility(View.GONE);
            return;
        }

        saveUserSession("101",email, "eca");
        showToast("Successfully logged in");
        navigateToMainActivity("eca");
    }


    private void saveUserSession(String userId,String email, String type) {
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putString("user_email", email);
        editor.putString("user_type", type);
        editor.putString("userId",userId);
        editor.putBoolean("is_logged_in", true);
        editor.apply();
    }

    private void navigateToMainActivity(String type) {
        Intent intent;
        if (type.equals("ec")) {
            intent = new Intent(LoginActivity.this, ECInfoActivity.class);
        } else if (type.equals("eca")) {
            intent = new Intent(LoginActivity.this, ECAMainActivity.class);
        } else {
            intent = new Intent(LoginActivity.this, InfoActivity.class);
        }
        startActivity(intent);
        finish();
    }

    private void showToast(String message) {
        Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
    }
}
package com.example.onlinevotingsystem;

import android.annotation.SuppressLint;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.OpenableColumns;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;

import okhttp3.*;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class MainActivity extends AppCompatActivity {

    private Button submitBtn, chooseFileBtn;
    private EditText firstName, lastName, aadharNumber;
    private RadioButton genderMale, genderFemale, genderOthers;
    private RadioGroup genderGrp;
    private DatePicker datePicker;
    private LinearLayout cardView;
    private static final int REQUEST_CODE_FILES = 1;
    private Uri fileUri;
    private File selectedFile;
    private OkHttpClient client = new OkHttpClient();
    private static final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co";
    private static final String SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";
    private ProgressDialog progressDialog;
    private SharedPreferences sharedPreferences;
    private String userId,name;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        submitBtn = findViewById(R.id.submitBtn);
        firstName = findViewById(R.id.firstName);
        lastName = findViewById(R.id.lastName);
        aadharNumber = findViewById(R.id.aadharNumber);
        genderMale = findViewById(R.id.male);
        genderFemale = findViewById(R.id.female);
        genderOthers = findViewById(R.id.others);
        datePicker = findViewById(R.id.datePicker);
        chooseFileBtn = findViewById(R.id.chooseFileBtn);
        genderGrp = findViewById(R.id.genderGrp);
        cardView = findViewById(R.id.uploadVoter);
        userId=getUserIdFromSession();
        name="";
        sharedPreferences = getSharedPreferences("UserSession", Context.MODE_PRIVATE);

        progressDialog = new ProgressDialog(this);
        progressDialog.setMessage("Processing, please wait...");
        progressDialog.setCancelable(false);

        chooseFileBtn.setOnClickListener(v -> selectFile());
        submitBtn.setOnClickListener(v -> submitData());
        fetchUserData();
    }

    private String getUserIdFromSession() {
        SharedPreferences sharedPreferences = getSharedPreferences("UserSession", Context.MODE_PRIVATE);
        String id=sharedPreferences.getString("userId", "");
        return id;
    }
    private String getUsername() {
        SharedPreferences sharedPreferences = getSharedPreferences("UserSession", Context.MODE_PRIVATE);
        String name=sharedPreferences.getString("first_name", "");
        return name;
    }
//    private void checkUserSession() {
//        if (sharedPreferences.contains("first_name")) {
//            Intent intent = new Intent(MainActivity.this, InfoActivity.class);
//            startActivity(intent);
//            finish();
//        }
//    }
    private void selectFile() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("image/*");
        startActivityForResult(Intent.createChooser(intent, "Select Image"), REQUEST_CODE_FILES);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_CODE_FILES && resultCode == RESULT_OK && data != null && data.getData() != null) {
            fileUri = data.getData();
            selectedFile = getFileFromUri(fileUri);

            if (selectedFile != null) {
                cardView.setVisibility(View.VISIBLE);
                Toast.makeText(this, "Image selected: " + selectedFile.getName(), Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "Failed to get file path.", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private File getFileFromUri(Uri uri) {
        try {
            InputStream inputStream = getContentResolver().openInputStream(uri);
            String fileName = getFileName(uri);
            File tempFile = new File(getCacheDir(), fileName);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                Files.copy(inputStream, tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
            }
            return tempFile;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @SuppressLint("Range")
    private String getFileName(Uri uri) {
        String result = null;
        if (uri.getScheme().equals("content")) {
            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
                if (cursor != null && cursor.moveToFirst()) {
                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
                }
            }
        }
        if (result == null) {
            result = uri.getPath();
            int cut = result.lastIndexOf('/');
            if (cut != -1) {
                result = result.substring(cut + 1);
            }
        }
        return result;
    }

    private void submitData() {
        String fName = firstName.getText().toString().trim();
        String lName = lastName.getText().toString().trim();
        String aadharNum = aadharNumber.getText().toString().trim();
        String gender = genderMale.isChecked() ? "male" : genderFemale.isChecked() ? "female" : genderOthers.isChecked() ? "others" : "";
        String dob = datePicker.getYear() + "-" + (datePicker.getMonth() + 1) + "-" + datePicker.getDayOfMonth();

        // Name validation
        if (fName.isEmpty() || !fName.matches("^[a-zA-Z]{2,}$")) {
            firstName.setError("Enter a valid first name (at least 2 alphabets)");
            firstName.requestFocus();
            return;
        }
        if (lName.isEmpty() || !lName.matches("^[a-zA-Z]{2,}$")) {
            lastName.setError("Enter a valid last name (at least 2 alphabets)");
            lastName.requestFocus();
            return;
        }

        // Aadhar validation
        if (aadharNum.isEmpty() || !aadharNum.matches("^[0-9]{12}$")) {
            aadharNumber.setError("Enter a valid 12-digit Aadhar number");
            aadharNumber.requestFocus();
            return;
        }

        // Gender validation
        if (gender.isEmpty()) {
            Toast.makeText(this, "Please select your gender", Toast.LENGTH_SHORT).show();
            return;
        }

        // Age validation (user should be at least 18 years old)
        int currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR);
        int userYear = datePicker.getYear();
        int age = currentYear - userYear;
        if (age < 18) {
            Toast.makeText(this, "You must be at least 18 years old to register", Toast.LENGTH_SHORT).show();
            return;
        }

        // File validation
        if (selectedFile == null) {
            Toast.makeText(this, "Please select an image before submitting", Toast.LENGTH_LONG).show();
            return;
        }

        // Validate file type (only JPG, PNG, JPEG allowed)
        String fileName = selectedFile.getName().toLowerCase();
        if (!fileName.endsWith(".jpg") && !fileName.endsWith(".jpeg") && !fileName.endsWith(".png")) {
            Toast.makeText(this, "Invalid file type. Only JPG, PNG, or JPEG allowed", Toast.LENGTH_LONG).show();
            return;
        }

        // Validate file size (should be less than 5MB)
        if (selectedFile.length() > 5 * 1024 * 1024) { // 5MB limit
            Toast.makeText(this, "File size should be less than 5MB", Toast.LENGTH_LONG).show();
            return;
        }

        progressDialog.show();
        Toast.makeText(MainActivity.this, "Processing user data...", Toast.LENGTH_SHORT).show();

        // Check if user already has an entry in Supabase and update if necessary
        boolean update = name.isEmpty();
        if (!update) {
            updateUserData(fName, lName, aadharNum, gender, dob);
        } else {
            uploadFile(fName, lName, aadharNum, gender, dob);
        }
    }


    private void updateUserData(String fName, String lName, String aadharNum, String gender, String dob) {
        JSONObject userJson = new JSONObject();
        try {
            userJson.put("first_name", fName);
            userJson.put("last_name", lName);
            userJson.put("aadhar_number", aadharNum);
            userJson.put("gender", gender);
            userJson.put("is_verified",String.valueOf(false));
            userJson.put("dob", dob);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        RequestBody requestBody = RequestBody.create(userJson.toString(), MediaType.parse("application/json"));
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/user_data?user_id=eq." + userId) // Update specific user
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .header("Content-Type", "application/json")
                .header("Prefer", "resolution=merge")
                .method("PATCH", requestBody) // Use PATCH to update existing record
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> {
                    progressDialog.dismiss();
                    Toast.makeText(MainActivity.this, "Failed to update user data!", Toast.LENGTH_SHORT).show();
                });
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                Log.d("onResponse: ",response.body().string());
                if (response.isSuccessful()) {
                    runOnUiThread(() -> {
                        Toast.makeText(MainActivity.this, "User data updated successfully!", Toast.LENGTH_SHORT).show();
                        if (progressDialog.isShowing()) {
                            progressDialog.dismiss();
                        }

                        Intent intent = new Intent(MainActivity.this, InfoActivity.class);
                        startActivity(intent);
                    });
                } else {
                    runOnUiThread(() -> {
                        progressDialog.dismiss();
                        Toast.makeText(MainActivity.this, "Failed to update user data!", Toast.LENGTH_SHORT).show();
                    });
                }
            }
        });
    }


    private void uploadFile(String fName, String lName, String aadharNum, String gender, String dob) {
        RequestBody fileBody = RequestBody.create(selectedFile, MediaType.parse("image/*"));

        MultipartBody requestBody = new MultipartBody.Builder().setType(MultipartBody.FORM)
                .addFormDataPart("file", selectedFile.getName(), fileBody)
                .build();

        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/storage/v1/object/user_uploads/" + selectedFile.getName())
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .post(requestBody)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> {
                    progressDialog.dismiss();
                    Toast.makeText(MainActivity.this, "File upload failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
                });
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                Log.d("onResponse1: ",response.body().string());
                if (response.isSuccessful()) {
                    String imageUrl = SUPABASE_URL + "/storage/v1/object/public/user_uploads/" + selectedFile.getName();
                    saveUserData(fName, lName, aadharNum, gender, dob, imageUrl);
                } else {
                    runOnUiThread(() -> {
                        progressDialog.dismiss();
                        Toast.makeText(MainActivity.this, "File upload failed!", Toast.LENGTH_LONG).show();
                    });
                }
            }
        });
    }

    private void saveUserData(String fName, String lName, String aadharNum, String gender, String dob, String imageUrl) {
        JSONObject userJson = new JSONObject();
        try {
            userJson.put("first_name", fName);
            userJson.put("last_name", lName);
            userJson.put("aadhar_number", aadharNum);
            userJson.put("gender", gender);
            userJson.put("dob", dob);
            userJson.put("image_url", imageUrl);
            userJson.put("user_id",userId);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        RequestBody requestBody = RequestBody.create(userJson.toString(), MediaType.parse("application/json"));
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/user_data")
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .header("Content-Type", "application/json")
                .post(requestBody)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> progressDialog.dismiss());
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                Log.d("onResponse2: ", response.body().string());

                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "User data submitted successfully...", Toast.LENGTH_SHORT).show();

                    if (progressDialog != null && progressDialog.isShowing()) {
                        progressDialog.dismiss();
                    }

                    // Ensure startActivity runs on UI thread
                    Intent intent = new Intent(MainActivity.this, InfoActivity.class);
                    startActivity(intent);
                });
            }

        });
    }
    private void fetchUserData() {
        if (userId.isEmpty()) {
            return;
        }

        progressDialog.show();

        HttpUrl.Builder urlBuilder = HttpUrl.parse(SUPABASE_URL + "/rest/v1/user_data")
                .newBuilder()
                .addQueryParameter("user_id", "eq." + userId)
                .addQueryParameter("select", "*");

        Request request = new Request.Builder()
                .url(urlBuilder.build().toString())
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .get()
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> {
                    progressDialog.dismiss();
                    Toast.makeText(MainActivity.this, "Failed to fetch user data", Toast.LENGTH_SHORT).show();
                });
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (response.isSuccessful()) {
                    String responseData = response.body().string();
                    runOnUiThread(() -> populateUserData(responseData));
                } else {
                    runOnUiThread(() -> {
                        progressDialog.dismiss();
                        Toast.makeText(MainActivity.this, "No user data found", Toast.LENGTH_SHORT).show();
                    });
                }
            }
        });
    }
    private void populateUserData(String jsonData) {
        try {
            JSONArray jsonArray = new JSONArray(jsonData);
            if (jsonArray.length() > 0) {
                JSONObject user = jsonArray.getJSONObject(0);
                name=user.optString("first_name", "");
                firstName.setText(name);
                lastName.setText(user.optString("last_name", ""));
                aadharNumber.setText(user.optString("aadhar_number", ""));

                String gender = user.optString("gender", "others");
                if (gender.equals("male")) genderMale.setChecked(true);
                else if (gender.equals("female")) genderFemale.setChecked(true);
                else genderOthers.setChecked(true);

                String dob = user.optString("dob", "2000-01-01");
                String[] dateParts = dob.split("-");
                datePicker.updateDate(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]) - 1, Integer.parseInt(dateParts[2]));

                String imageUrl = user.optString("image_url", "");
                if (!imageUrl.isEmpty()) {
                    cardView.setVisibility(View.VISIBLE);
                    selectedFile = new File(imageUrl);
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        } finally {
            progressDialog.dismiss();
        }
    }

}
package com.example.onlinevotingsystem;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import org.json.JSONObject;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class MakeElectionActivity extends AppCompatActivity {
    private static final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co";
    private static final String SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";

    private EditText electionName;
    private Button makeElectionBtn, backToMainPage;
    private DatePicker startElectionDate, endElectionDate;
    private OkHttpClient client = new OkHttpClient();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_make_election);

        electionName = findViewById(R.id.electionName);
        makeElectionBtn = findViewById(R.id.makeElectionBtn);
        startElectionDate = findViewById(R.id.startDatePicker);
        endElectionDate = findViewById(R.id.endDatePicker);
        backToMainPage = findViewById(R.id.backToInfoPageFromCreateElectionECA);

        backToMainPage.setOnClickListener(v -> {

            finish();
        });

        makeElectionBtn.setOnClickListener(v -> createElection());
    }

    private void createElection() {
        int startDay = startElectionDate.getDayOfMonth();
        int startMonth = startElectionDate.getMonth() + 1;
        int startYear = startElectionDate.getYear();
        String startElectionDateFormatted = startYear + "-" + startMonth + "-" + startDay;

        int endDay = endElectionDate.getDayOfMonth();
        int endMonth = endElectionDate.getMonth() + 1;
        int endYear = endElectionDate.getYear();
        String endElectionDateFormatted = endYear + "-" + endMonth + "-" + endDay;

        String electionNameStr = electionName.getText().toString();

        if (electionNameStr.isEmpty()) {
            Toast.makeText(getApplicationContext(), "Please enter an election name", Toast.LENGTH_SHORT).show();
            return;
        }

        Map<String, String> electionData = new HashMap<>();
        electionData.put("election_name", electionNameStr);
        electionData.put("start_date", startElectionDateFormatted);
        electionData.put("end_date", endElectionDateFormatted);
        electionData.put("winner", "");
        electionData.put("status", "false");

        RequestBody requestBody = RequestBody.create(new JSONObject(electionData).toString(), MediaType.parse("application/json"));

        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/elections")
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .header("Content-Type", "application/json")
                .post(requestBody)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Error: " + e.getMessage(), Toast.LENGTH_LONG).show());
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (response.isSuccessful()) {
                    runOnUiThread(() -> {
                        Toast.makeText(getApplicationContext(), "Election added successfully!", Toast.LENGTH_LONG).show();
                        startActivity(new Intent(getApplicationContext(), ECAMainActivity.class));
                    });
                } else {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Failed to create election!", Toast.LENGTH_LONG).show());
                }
            }
        });
    }
}
package com.example.onlinevotingsystem;

import androidx.appcompat.app.AppCompatActivity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.Toast;
import org.json.JSONException;
import org.json.JSONObject;
import java.io.IOException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class RegisterActivity extends AppCompatActivity {

    private static final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co";
    private static final String SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";  // Use service role key for DB writes
    private static final String AUTH_ENDPOINT = "/auth/v1/signup";
    private static final String USERS_TABLE_ENDPOINT = "/rest/v1/users";

    private EditText emailTextView, passwordTextView;
    private Button Btn, btnECRegister, goToLoginPage;
    private ProgressBar progressBar;
    private OkHttpClient client;
    private SharedPreferences sharedPreferences;
    private static final String PREF_NAME = "UserSession";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_register);

        // Initialize views
        emailTextView = findViewById(R.id.email);
        passwordTextView = findViewById(R.id.passwd);
        Btn = findViewById(R.id.btnregister);
        progressBar = findViewById(R.id.progressbar);
        goToLoginPage = findViewById(R.id.goToLoginPage);
        btnECRegister = findViewById(R.id.btnECRegister);
        client = new OkHttpClient();

        // Initialize SharedPreferences
        sharedPreferences = getSharedPreferences(PREF_NAME, MODE_PRIVATE);

        // Set onClick listeners
        Btn.setOnClickListener(v -> registerNewUser("voter"));
        btnECRegister.setOnClickListener(v -> registerNewUser("ec"));
        goToLoginPage.setOnClickListener(v -> startActivity(new Intent(getApplicationContext(), LoginActivity.class)));
    }

    private void registerNewUser(String userType) {
        progressBar.setVisibility(View.VISIBLE);

        String email = emailTextView.getText().toString();
        String password = passwordTextView.getText().toString();

        if (TextUtils.isEmpty(email) || TextUtils.isEmpty(password) || password.length() < 6) {
            showToast("Please enter a valid email and password (min 6 characters).");
            progressBar.setVisibility(View.GONE);
            return;
        }

        JSONObject jsonAuth = new JSONObject();
        try {
            jsonAuth.put("email", email);
            jsonAuth.put("password", password);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        RequestBody authBody = RequestBody.create(jsonAuth.toString(), MediaType.get("application/json; charset=utf-8"));

        Request authRequest = new Request.Builder()
                .url(SUPABASE_URL + AUTH_ENDPOINT)
                .post(authBody)
                .addHeader("apikey", SUPABASE_API_KEY)
                .addHeader("Content-Type", "application/json")
                .build();

        client.newCall(authRequest).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                runOnUiThread(() -> {
                    showToast("Registration failed! Please try again.");
                    progressBar.setVisibility(View.GONE);
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (response.isSuccessful()) {
                    try {
                        String responseBody = response.body().string();
                        JSONObject jsonResponse = new JSONObject(responseBody);
                        String userId = jsonResponse.getString("id");  // Get user UUID from Supabase Auth

                        insertUserIntoDatabase(userId, email, password, userType);

                    } catch (JSONException e) {
                        e.printStackTrace();
                        runOnUiThread(() -> showToast("Error parsing authentication response"));
                    }
                } else {
                    runOnUiThread(() -> {
                        showToast("Authentication failed! Email might be taken.");
                        progressBar.setVisibility(View.GONE);
                    });
                }
            }
        });
    }

    private void insertUserIntoDatabase(String userId, String email, String password, String userType) {
        JSONObject jsonUser = new JSONObject();
        try {
            jsonUser.put("id", userId);
            jsonUser.put("email", email);
            jsonUser.put("password_hash", password);  // Ideally, store hashed password
            jsonUser.put("user_type", userType);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        RequestBody userBody = RequestBody.create(jsonUser.toString(), MediaType.get("application/json; charset=utf-8"));

        Request userRequest = new Request.Builder()
                .url(SUPABASE_URL + USERS_TABLE_ENDPOINT)
                .post(userBody)
                .addHeader("apikey", SUPABASE_API_KEY)
                .addHeader("Authorization", "Bearer " + SUPABASE_API_KEY)  // Service role key needed for DB writes
                .addHeader("Content-Type", "application/json")
                .build();

        client.newCall(userRequest).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                runOnUiThread(() -> {
                    showToast("Database insertion failed!");
                    progressBar.setVisibility(View.GONE);
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                Log.d("onResponse: ",response.body().string());
                if (response.isSuccessful()) {
                    runOnUiThread(() -> {
                        showToast("User registered successfully!");
                        progressBar.setVisibility(View.GONE);
                        navigateToNextActivity(userType);
                    });
                } else {
                    runOnUiThread(() -> {
                        showToast("Error inserting into database");
                        progressBar.setVisibility(View.GONE);
                    });
                }
            }
        });
    }

    private void navigateToNextActivity(String userType) {
        Intent intent;
        if ("voter".equals(userType)) {
            intent = new Intent(RegisterActivity.this, LoginActivity.class);
        } else {
            intent = new Intent(RegisterActivity.this, LoginActivity.class);
        }
        startActivity(intent);
        finish();
    }

    private void showToast(String message) {
        Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
    }
}
package com.example.onlinevotingsystem;

import android.content.Intent;
import android.graphics.Color;
import android.graphics.Typeface;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.cardview.widget.CardView;

import com.github.mikephil.charting.animation.Easing;
import com.github.mikephil.charting.charts.PieChart;
import com.github.mikephil.charting.data.PieData;
import com.github.mikephil.charting.data.PieDataSet;
import com.github.mikephil.charting.data.PieEntry;

import org.json.JSONArray;
import org.json.JSONObject;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class ResultsActivity extends AppCompatActivity {
    private LinearLayout showAllDoneElections;
    private Button goBackToInfoPageResults;
    private ArrayList<String> candidates = new ArrayList<>();
    private OkHttpClient client = new OkHttpClient();
    private static final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co/rest/v1/";
    private static final String SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_results);

        showAllDoneElections = findViewById(R.id.allDoneElections);
        goBackToInfoPageResults = findViewById(R.id.backToInfoPageFromResults);
        goBackToInfoPageResults.setOnClickListener(v -> {
            String userType = LoginActivity.curUserType;
            if ("ec".equals(userType)) {
                startActivity(new Intent(getApplicationContext(), ECInfoActivity.class));
                finish();
            } else if ("voter".equals(userType)) {
                startActivity(new Intent(getApplicationContext(), InfoActivity.class));
                finish();
            } else {
//                startActivity(new Intent(getApplicationContext(), ECAMainActivity.class));
                finish();
            }
        });

        fetchElections();
    }



    private void fetchElections() {
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "elections?status=eq.true") // Fetch only completed elections
                .addHeader("apikey", SUPABASE_KEY)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Failed to fetch elections", Toast.LENGTH_LONG).show());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (response.isSuccessful()) {
                    try {
                        JSONArray jsonArray = new JSONArray(response.body().string());

                        // ✅ Call processElectionData() here to display results
                        runOnUiThread(() -> processElectionData(jsonArray));

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }




    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)
    private void processElectionData(JSONArray elections) {
        for (int i = 0; i < elections.length(); i++) {
            try {
                JSONObject election = elections.getJSONObject(i);
                int electionId = election.getInt("id");
                String electionName = election.getString("election_name");

                // Card styling
                CardView newCard = new CardView(getApplicationContext());
                LinearLayout.LayoutParams cardParams = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT
                );
                cardParams.setMargins(20, 20, 20, 20);
                newCard.setLayoutParams(cardParams);
                newCard.setRadius(20);
                newCard.setCardElevation(10);
                newCard.setPadding(20, 20, 20, 20);
                newCard.setCardBackgroundColor(Color.WHITE);

                LinearLayout newLinearLayout = new LinearLayout(getApplicationContext());
                newLinearLayout.setOrientation(LinearLayout.VERTICAL);
                newLinearLayout.setPadding(20, 20, 20, 20);

                // Election Name Styling
                TextView electionNameTxt = new TextView(getApplicationContext());
                electionNameTxt.setText(electionName);
                electionNameTxt.setTextSize(24);
                electionNameTxt.setTypeface(null, Typeface.BOLD);
                electionNameTxt.setGravity(Gravity.CENTER);
                electionNameTxt.setPadding(10, 10, 10, 20);
                newLinearLayout.addView(electionNameTxt);

                // Table Layout
                TableLayout tableLayout = new TableLayout(getApplicationContext());
                tableLayout.setStretchAllColumns(true);
                tableLayout.setBackgroundColor(Color.LTGRAY);
                tableLayout.setPadding(10, 10, 10, 10);

                // Header Row
                TableRow tableRowHeader = new TableRow(getApplicationContext());
                tableRowHeader.setBackgroundColor(Color.parseColor("#0079D6"));

                String[] headers = {"Candidate", "Party", "Votes"};
                for (String header : headers) {
                    TextView textView = new TextView(getApplicationContext());
                    textView.setText(header);
                    textView.setTextColor(Color.WHITE);
                    textView.setTypeface(null, Typeface.BOLD);
                    textView.setPadding(20, 20, 20, 20);
                    textView.setGravity(Gravity.CENTER);
                    tableRowHeader.addView(textView);
                }
                tableLayout.addView(tableRowHeader);

                fetchCandidateResults(electionId, tableLayout, newLinearLayout, newCard);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void fetchCandidateResults(int electionId, TableLayout tableLayout, LinearLayout newLinearLayout, CardView newCard) {
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "candidate_results?election_id=eq." + electionId)
                .addHeader("apikey", SUPABASE_KEY)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Failed to fetch candidate results", Toast.LENGTH_LONG).show());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (response.isSuccessful()) {
                    try {
                        JSONArray jsonArray = new JSONArray(response.body().string());

                        runOnUiThread(() -> {
                            try {
                                for (int i = 0; i < jsonArray.length(); i++) {
                                    JSONObject candidateObj = jsonArray.getJSONObject(i);
                                    String candidateName = candidateObj.getString("candidate_name");
                                    String partyName = candidateObj.getString("party_name");
                                    int voteCount = candidateObj.getInt("vote_count");

                                    TableRow tableRow = new TableRow(getApplicationContext());
                                    if (i % 2 == 0) {
                                        tableRow.setBackgroundColor(Color.parseColor("#E3F2FD")); // Alternate row color
                                    }

                                    String[] rowData = {candidateName, partyName, String.valueOf(voteCount)};
                                    for (String data : rowData) {
                                        TextView textView = new TextView(getApplicationContext());
                                        textView.setText(data);
                                        textView.setPadding(20, 20, 20, 20);
                                        textView.setGravity(Gravity.CENTER);
                                        textView.setTextSize(16);
                                        tableRow.addView(textView);
                                    }

                                    tableLayout.addView(tableRow);
                                }

                                newLinearLayout.addView(tableLayout);
                                newCard.addView(newLinearLayout);
                                showAllDoneElections.addView(newCard);

                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        });

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }




}
package com.example.onlinevotingsystem;

import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class ShowAllCurrentElections extends AppCompatActivity {
    private static final String SUPABASE_URL = "https://jguebadkcrppupsgvnqu.supabase.co";
    private static final String SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndWViYWRrY3JwcHVwc2d2bnF1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzY0ODI1MzgsImV4cCI6MjA1MjA1ODUzOH0.CZ2KeuqdsRODg2QzpSGfqxlqTpaIDrt8WEEJ1A6JGuU";

    private LinearLayout showAllRunningElections, noElectionsLayout;
    private Button goBackToInfoPageFromAllElections;
    private OkHttpClient client = new OkHttpClient();
    private String userId = "user-123";  // Replace with actual user ID from authentication

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_all_elections);

        showAllRunningElections = findViewById(R.id.showAllRunningElections);
        noElectionsLayout = findViewById(R.id.noOngoingElectionsLayout);
        goBackToInfoPageFromAllElections = findViewById(R.id.backToInfoPageFromAllElections);

        goBackToInfoPageFromAllElections.setOnClickListener(v -> startActivity(new Intent(getApplicationContext(), InfoActivity.class)));

        fetchElections();
    }

    private void fetchElections() {
        Request request = new Request.Builder()
                .url(SUPABASE_URL + "/rest/v1/elections?select=*")
                .header("apikey", SUPABASE_API_KEY)
                .header("Authorization", "Bearer " + SUPABASE_API_KEY)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)
            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                if (!response.isSuccessful()) {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Failed to fetch elections", Toast.LENGTH_SHORT).show());
                    return;
                }

                try {
                    JSONArray elections = new JSONArray(response.body().string());
                    runOnUiThread(() -> showElections(elections));
                } catch (JSONException e) {
                    runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Error parsing data", Toast.LENGTH_SHORT).show());
                }
            }

            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                runOnUiThread(() -> Toast.makeText(getApplicationContext(), "Network error: " + e.getMessage(), Toast.LENGTH_SHORT).show());
            }
        });
    }

    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)
    private void showElections(JSONArray elections) {
        showAllRunningElections.removeAllViews();
        int numElections = 0;

        for (int i = 0; i < elections.length(); i++) {
            try {
                JSONObject election = elections.getJSONObject(i);
                String electionName = election.getString("election_name");
                boolean isDone = election.getBoolean("status");

                // Check if user already voted (mock logic for now)
                boolean userHasVoted = false; // Replace with actual logic to check user votes

                if (!userHasVoted && !isDone) {
                    numElections++;

                    Button curElectionBtn = new Button(getApplicationContext());
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                        curElectionBtn.setElevation(2);
                    }
                    curElectionBtn.setId(View.generateViewId());
                    curElectionBtn.setText(electionName);

                    curElectionBtn.setOnClickListener(v -> {
                        Intent intent = new Intent(getApplicationContext(), ElectionActivity.class);
                        intent.putExtra("electionName", electionName);
                        startActivity(intent);
                    });

                    showAllRunningElections.addView(curElectionBtn);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        if (numElections == 0) {
            noElectionsLayout.setVisibility(View.VISIBLE);
        } else {
            noElectionsLayout.setVisibility(View.GONE);
        }
    }
}
package com.example.onlinevotingsystem;

public class User {
    String fName,lName,gender,dob,aadharNum,hasSubmitted,isVerified,message,userId;

    public User(){
        //no argument user
    }

    public User(String fName, String lName, String gender, String dob, String aadharNum,String hasSubmitted,String isVerified,String message,String userId) {
        this.fName = fName;
        this.lName = lName;
        this.gender = gender;
        this.dob = dob;
        this.aadharNum = aadharNum;
        this.hasSubmitted = hasSubmitted;
        this.isVerified = isVerified;
        this.message = message;
        this.userId = userId;
    }

    public String getAadharNum() {
        return aadharNum;
    }

    public String getDob() {
        return dob;
    }

    public String getfName() {
        return fName;
    }

    public String getlName() {
        return lName;
    }

    public String getGender() {
        return gender;
    }

    public String getHasSubmitted() {
        return hasSubmitted;
    }

    public String getIsVerified() {
        return isVerified;
    }

    public String getMessage() {
        return message;
    }

    public String getUserId() {
        return userId;
    }

    public void setfName(String fName) {
        this.fName = fName;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public void setlName(String lName) {
        this.lName = lName;
    }

    public void setAadharNum(String aadharNum) {
        this.aadharNum = aadharNum;
    }

    public void setDob(String dob) {
        this.dob = dob;
    }

    public void setHasSubmitted(String hasSubmitted) {
        this.hasSubmitted = hasSubmitted;
    }

    public void setIsVerified(String isVerified) {
        this.isVerified = isVerified;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }
}
